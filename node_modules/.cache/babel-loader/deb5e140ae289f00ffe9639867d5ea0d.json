{"ast":null,"code":"import axios from 'axios';\nimport { createBrowserHistory } from 'history';\nconst $host = axios.create({\n  baseURL: process.env.REACT_APP_API_URL\n});\nconst $authHost = axios.create({\n  baseURL: process.env.REACT_APP_API_URL\n});\n\nconst authInterceptor = config => {\n  config.headers.authorization = `Bearer ${localStorage.token}x`;\n  return config;\n};\n\n$authHost.interceptors.response.use(response => {\n  console.log(response); // console.log('response', response);\n  // if (response.status === 401) {\n  //   console.log('oops 401');\n  //   createBrowserHistory().push('/login')\n  // }\n});\n$authHost.interceptors.request.use(authInterceptor);\nexport { $host, $authHost };","map":{"version":3,"sources":["F:/web/chat/client/src/api/axios.js"],"names":["axios","createBrowserHistory","$host","create","baseURL","process","env","REACT_APP_API_URL","$authHost","authInterceptor","config","headers","authorization","localStorage","token","interceptors","response","use","console","log","request"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,oBAAR,QAAmC,SAAnC;AAEA,MAAMC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADI,CAAb,CAAd;AAIA,MAAMC,SAAS,GAAGR,KAAK,CAACG,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADQ,CAAb,CAAlB;;AAIA,MAAME,eAAe,GAAGC,MAAM,IAAI;AAChCA,EAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAAgC,UAASC,YAAY,CAACC,KAAM,GAA5D;AACA,SAAOJ,MAAP;AACD,CAHD;;AAKAF,SAAS,CAACO,YAAV,CAAuBC,QAAvB,CAAgCC,GAAhC,CAAoCD,QAAQ,IAAI;AAC9CE,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAD8C,CAE9C;AACA;AACA;AACA;AACA;AACD,CAPD;AASAR,SAAS,CAACO,YAAV,CAAuBK,OAAvB,CAA+BH,GAA/B,CAAmCR,eAAnC;AAIA,SACEP,KADF,EACSM,SADT","sourcesContent":["import axios from 'axios'\r\nimport {createBrowserHistory} from 'history'\r\n\r\nconst $host = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL\r\n})\r\n\r\nconst $authHost = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL\r\n})\r\n\r\nconst authInterceptor = config => {\r\n  config.headers.authorization = `Bearer ${localStorage.token}x`\r\n  return config\r\n}\r\n\r\n$authHost.interceptors.response.use(response => {\r\n  console.log(response);\r\n  // console.log('response', response);\r\n  // if (response.status === 401) {\r\n  //   console.log('oops 401');\r\n  //   createBrowserHistory().push('/login')\r\n  // }\r\n})\r\n\r\n$authHost.interceptors.request.use(authInterceptor)\r\n\r\n\r\n\r\nexport {\r\n  $host, $authHost\r\n}"]},"metadata":{},"sourceType":"module"}