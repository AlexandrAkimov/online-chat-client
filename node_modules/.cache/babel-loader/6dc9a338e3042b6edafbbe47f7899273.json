{"ast":null,"code":"import jwt_decode from \"jwt-decode\";\nimport { LOGIN, LOGOUT, GET_USERS, CLEAR_USERS, GET_CURRENT_USER } from \"../types\";\nimport { findUsers, login, registration } from '../../api/userApi';\nexport const loginAction = (nickname, password, isLogin) => {\n  return async dispatch => {\n    try {\n      const data = isLogin ? await login(nickname, password) : await registration(nickname, password);\n      dispatch({\n        type: LOGIN,\n        payload: data.data.token\n      });\n      localStorage.token = data.data.token;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const logout = () => {\n  localStorage.clear();\n  return {\n    type: LOGOUT\n  };\n};\nexport const clearUsers = () => ({\n  type: CLEAR_USERS\n});\nexport const getUsers = nickname => {\n  return async dispatch => {\n    try {\n      const users = await findUsers(nickname);\n      dispatch({\n        type: GET_USERS,\n        payload: users.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const getCurrentUser = () => {\n  const token = localStorage.token;\n  const user = jwt_decode(token);\n  return {\n    type: GET_CURRENT_USER,\n    payload: user\n  };\n};","map":{"version":3,"sources":["F:/web/chat/client/src/store/actions/userAction.js"],"names":["jwt_decode","LOGIN","LOGOUT","GET_USERS","CLEAR_USERS","GET_CURRENT_USER","findUsers","login","registration","loginAction","nickname","password","isLogin","dispatch","data","type","payload","token","localStorage","error","console","log","logout","clear","clearUsers","getUsers","users","getCurrentUser","user"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,WAAnC,EAAgDC,gBAAhD,QAAwE,UAAxE;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,YAA3B,QAA+C,mBAA/C;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;AAC1D,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,IAAI,GAAGF,OAAO,GAChB,MAAML,KAAK,CAACG,QAAD,EAAWC,QAAX,CADK,GAEhB,MAAMH,YAAY,CAACE,QAAD,EAAWC,QAAX,CAFtB;AAGAE,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEd,KADC;AACMe,QAAAA,OAAO,EAAEF,IAAI,CAACA,IAAL,CAAUG;AADzB,OAAD,CAAR;AAGAC,MAAAA,YAAY,CAACD,KAAb,GAAqBH,IAAI,CAACA,IAAL,CAAUG,KAA/B;AACD,KARD,CAQE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AAEF,GAbD;AAcD,CAfM;AAiBP,OAAO,MAAMG,MAAM,GAAG,MAAM;AAC1BJ,EAAAA,YAAY,CAACK,KAAb;AACA,SAAO;AACLR,IAAAA,IAAI,EAAEb;AADD,GAAP;AAGD,CALM;AAOP,OAAO,MAAMsB,UAAU,GAAG,OAAO;AAAET,EAAAA,IAAI,EAAEX;AAAR,CAAP,CAAnB;AAEP,OAAO,MAAMqB,QAAQ,GAAGf,QAAQ,IAAI;AAClC,SAAO,MAAMG,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMa,KAAK,GAAG,MAAMpB,SAAS,CAACI,QAAD,CAA7B;AACAG,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEZ,SADC;AACUa,QAAAA,OAAO,EAAEU,KAAK,CAACZ;AADzB,OAAD,CAAR;AAGD,KALD,CAKE,OAAOK,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GATD;AAUD,CAXM;AAaP,OAAO,MAAMQ,cAAc,GAAG,MAAM;AAClC,QAAMV,KAAK,GAAGC,YAAY,CAACD,KAA3B;AACA,QAAMW,IAAI,GAAG5B,UAAU,CAACiB,KAAD,CAAvB;AACA,SAAO;AAACF,IAAAA,IAAI,EAAEV,gBAAP;AAAyBW,IAAAA,OAAO,EAAEY;AAAlC,GAAP;AACD,CAJM","sourcesContent":["import jwt_decode from \"jwt-decode\";\r\nimport { LOGIN, LOGOUT, GET_USERS, CLEAR_USERS, GET_CURRENT_USER } from \"../types\"\r\nimport { findUsers, login, registration } from '../../api/userApi';\r\n\r\nexport const loginAction = (nickname, password, isLogin) => {\r\n  return async dispatch => {\r\n    try {\r\n      const data = isLogin\r\n        ? await login(nickname, password)\r\n        : await registration(nickname, password)\r\n      dispatch({\r\n        type: LOGIN, payload: data.data.token\r\n      })\r\n      localStorage.token = data.data.token;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport const logout = () => {\r\n  localStorage.clear()\r\n  return {\r\n    type: LOGOUT,\r\n  }\r\n}\r\n\r\nexport const clearUsers = () => ({ type: CLEAR_USERS })\r\n\r\nexport const getUsers = nickname => {\r\n  return async dispatch => {\r\n    try {\r\n      const users = await findUsers(nickname)\r\n      dispatch({\r\n        type: GET_USERS, payload: users.data\r\n      })  \r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n}\r\n\r\nexport const getCurrentUser = () => {\r\n  const token = localStorage.token\r\n  const user = jwt_decode(token);\r\n  return {type: GET_CURRENT_USER, payload: user}\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}