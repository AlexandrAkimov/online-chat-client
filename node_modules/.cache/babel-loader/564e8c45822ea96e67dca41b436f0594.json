{"ast":null,"code":"var _jsxFileName = \"F:\\\\web\\\\chat\\\\client\\\\src\\\\pages\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport Sidebar from '../components/Sidebar/Sidebar';\nimport Home from '../components/Home/Chat';\nimport { getCurrentUser } from '../store/actions/userAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  _s();\n\n  const currentUser = useSelector(state => state.user.currentUser);\n  const dispatch = useDispatch();\n  const [isDrawer, setIsDrawer] = useState(false);\n  const [room, setRoom] = useState(``);\n  const [messages, setMessages] = useState([]);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [clients, setClients] = useState([]);\n  const socket = useRef();\n  const publicSocket = useRef();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!localStorage.token) {\n      return navigate('/login');\n    }\n\n    dispatch(getCurrentUser());\n\n    if (currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname) {\n      console.log(currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname);\n      publicSocket.current = new WebSocket('ws://localhost:5000');\n\n      publicSocket.current.onopen = () => {\n        const message = {\n          event: 'connection',\n          user: currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname,\n          id: Date.now()\n        };\n        publicSocket.current.send(JSON.stringify(message));\n        console.log('Общее подключение установлено');\n      };\n\n      publicSocket.current.onmessage = event => {\n        console.log(event.data);\n        const data = JSON.parse(event.data);\n        setOnlineUsers(prev => [...prev, data.user]);\n      };\n\n      publicSocket.current.onclose = event => {};\n    }\n  }, [dispatch, navigate, currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname]);\n\n  const toggleDrawerHandler = () => {\n    setIsDrawer(prev => !prev);\n  };\n\n  const connection = roomNum => {\n    socket.current = new WebSocket('ws://localhost:5000');\n\n    socket.current.onopen = () => {\n      const message = {\n        event: 'connection',\n        username: currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname,\n        id: Date.now(),\n        room: roomNum\n      };\n\n      if (!clients.includes(message.id)) {\n        socket.current.send(JSON.stringify(message));\n      }\n\n      setClients([...clients, message.id]);\n      console.log(`Подключение ${roomNum} установлено`);\n    };\n\n    socket.current.onmessage = event => {\n      const message = JSON.parse(event.data);\n\n      if (message.room) {\n        setMessages(prev => [...prev, message]);\n      }\n    };\n\n    socket.current.onclose = event => {\n      console.log('Поздключение закрыто');\n    };\n\n    socket.current.onerror = () => {\n      console.log('Ошибка');\n    };\n  };\n\n  const onConnect = nickname => {\n    setRoom(`${nickname}-${currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname}`);\n\n    if (!room.includes(nickname)) {\n      setMessages([]);\n      connection(`${nickname}-${currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname}`);\n    }\n  };\n\n  const sendMessage = value => {\n    const message = {\n      event: 'message',\n      username: currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname,\n      id: Date.now(),\n      message: value,\n      room\n    };\n    socket.current.send(JSON.stringify(message));\n  };\n\n  const toOnline = nickname => {\n    const message = {\n      event: 'connection',\n      id: Date.now(),\n      user: nickname\n    };\n    publicSocket.current.send(JSON.stringify(message));\n  };\n\n  const onDisconnect = nickname => {\n    const message = {\n      event: 'disconnect',\n      message: nickname\n    };\n    publicSocket.current.send(JSON.stringify(message));\n    console.log(onlineUsers);\n    console.log('disconnect');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    onClick: () => toOnline(currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname),\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      isDrawer: isDrawer,\n      onConnect: onConnect,\n      onlineUsers: onlineUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Home, {\n      onToggle: toggleDrawerHandler,\n      messages: messages,\n      sendMessage: sendMessage,\n      onDisconnect: onDisconnect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"QerEJOVwthpvASsRcNVWmoZdPD8=\", false, function () {\n  return [useSelector, useDispatch, useNavigate];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["F:/web/chat/client/src/pages/Chat.js"],"names":["React","useEffect","useState","useRef","useDispatch","useSelector","useNavigate","Sidebar","Home","getCurrentUser","Chat","currentUser","state","user","dispatch","isDrawer","setIsDrawer","room","setRoom","messages","setMessages","onlineUsers","setOnlineUsers","clients","setClients","socket","publicSocket","navigate","localStorage","token","nickname","console","log","current","WebSocket","onopen","message","event","id","Date","now","send","JSON","stringify","onmessage","data","parse","prev","onclose","toggleDrawerHandler","connection","roomNum","username","includes","onerror","onConnect","sendMessage","value","toOnline","onDisconnect","display"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Sidebar from '../components/Sidebar/Sidebar';\r\nimport Home from '../components/Home/Chat'\r\nimport { getCurrentUser } from '../store/actions/userAction';\r\n\r\nconst Chat = () => {\r\n\r\n  const currentUser = useSelector(state => state.user.currentUser)\r\n  const dispatch = useDispatch()\r\n\r\n\r\n  const [isDrawer, setIsDrawer] = useState(false)\r\n  const [room, setRoom] = useState(``)\r\n  const [messages, setMessages] = useState([])\r\n  const [onlineUsers, setOnlineUsers] = useState([])\r\n  const [clients, setClients] = useState([])\r\n\r\n  const socket = useRef()\r\n  const publicSocket = useRef()\r\n\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    if (!localStorage.token) {\r\n      return navigate('/login')\r\n    }\r\n\r\n    dispatch(getCurrentUser())\r\n    if (currentUser?.nickname) {\r\n      console.log(currentUser?.nickname);\r\n      publicSocket.current = new WebSocket('ws://localhost:5000')\r\n      publicSocket.current.onopen = () => {\r\n        const message = {\r\n          event: 'connection',\r\n          user: currentUser?.nickname,\r\n          id: Date.now(),\r\n        }\r\n        \r\n        publicSocket.current.send(JSON.stringify(message))\r\n        console.log('Общее подключение установлено');\r\n      }\r\n      publicSocket.current.onmessage = (event) => {\r\n        console.log(event.data);\r\n        const data = JSON.parse(event.data);\r\n        setOnlineUsers(prev => [...prev, data.user])\r\n      }\r\n      publicSocket.current.onclose = (event) => {\r\n\r\n      }\r\n    }\r\n\r\n\r\n  }, [dispatch, navigate, currentUser?.nickname]);\r\n\r\n  const toggleDrawerHandler = () => {\r\n    setIsDrawer(prev => !prev)\r\n  }\r\n\r\n  const connection = (roomNum) => {\r\n    socket.current = new WebSocket('ws://localhost:5000')\r\n    socket.current.onopen = () => {\r\n      const message = {\r\n        event: 'connection',\r\n        username: currentUser?.nickname,\r\n        id: Date.now(),\r\n        room: roomNum\r\n      }\r\n      \r\n      if (!clients.includes(message.id)) {\r\n        socket.current.send(JSON.stringify(message))  \r\n      }\r\n      \r\n      setClients([...clients, message.id])\r\n      console.log(`Подключение ${roomNum} установлено`);\r\n    }\r\n\r\n    socket.current.onmessage = (event) => {\r\n      const message = JSON.parse(event.data)\r\n      if (message.room) {\r\n        setMessages(prev => [...prev, message])\r\n      }\r\n      \r\n    }\r\n\r\n    socket.current.onclose = (event) => {\r\n      console.log('Поздключение закрыто');\r\n\r\n    }\r\n\r\n    socket.current.onerror = () => {\r\n      console.log('Ошибка');\r\n    }\r\n  }\r\n\r\n  const onConnect = (nickname) => {\r\n    setRoom(`${nickname}-${currentUser?.nickname}`)\r\n    if (!room.includes(nickname)) {\r\n      setMessages([]) \r\n      connection(`${nickname}-${currentUser?.nickname}`) \r\n    }\r\n  }\r\n\r\n  const sendMessage = (value) => {\r\n    const message = {\r\n      event: 'message',\r\n      username: currentUser?.nickname,\r\n      id: Date.now(),\r\n      message: value,\r\n      room\r\n    }\r\n    socket.current.send(JSON.stringify(message))\r\n  }\r\n\r\n  const toOnline = nickname => {\r\n    const message = {\r\n      event: 'connection',\r\n      id: Date.now(),\r\n      user: nickname\r\n    }\r\n    publicSocket.current.send(JSON.stringify(message))\r\n  }\r\n\r\n  const onDisconnect = (nickname) => {\r\n    const message = {\r\n      event: 'disconnect',\r\n      message: nickname\r\n    }\r\n    publicSocket.current.send(JSON.stringify(message))\r\n    console.log(onlineUsers);\r\n    console.log('disconnect');\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: 'flex' }} onClick={() => toOnline(currentUser?.nickname)}>\r\n      <Sidebar isDrawer={isDrawer} onConnect={onConnect} onlineUsers={onlineUsers}/>\r\n      <Home onToggle={toggleDrawerHandler} messages={messages} sendMessage={sendMessage} onDisconnect={onDisconnect}/>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}