{"ast":null,"code":"import jwt_decode from \"jwt-decode\";\nimport { LOGIN, LOGOUT, GET_USERS, CLEAR_USERS, GET_CURRENT_USER } from \"../types\";\nimport { findUsers, login, registration, update } from '../../api/userApi';\nexport const getCurrentUser = () => {\n  const token = localStorage.token;\n  const user = jwt_decode(token);\n  return {\n    type: GET_CURRENT_USER,\n    payload: user\n  };\n};\nexport const loginAction = (formdata, isLogin) => {\n  return async dispatch => {\n    try {\n      const data = isLogin ? await login(formdata) : await registration(formdata);\n      dispatch({\n        type: LOGIN,\n        payload: data.data.token\n      });\n      localStorage.token = data.data.token;\n    } catch (error) {\n      throw new Error(error);\n    }\n  };\n};\nexport const updateProfile = formData => {\n  return async dispatch => {\n    try {\n      const data = await update(formData);\n      dispatch({\n        type: LOGIN,\n        payload: data.data.token\n      });\n      localStorage.token = data.data.token;\n      dispatch(getCurrentUser());\n    } catch (error) {\n      throw new Error(error);\n    }\n  };\n};\nexport const clearUsers = () => ({\n  type: CLEAR_USERS\n});\nexport const logout = () => {\n  localStorage.clear();\n  return {\n    type: LOGOUT\n  };\n};\nexport const getUsers = nickname => {\n  return async dispatch => {\n    try {\n      const users = await findUsers(nickname);\n      console.log(users.data);\n      dispatch({\n        type: GET_USERS,\n        payload: users.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};","map":{"version":3,"sources":["F:/web/chat/client/src/store/actions/userAction.js"],"names":["jwt_decode","LOGIN","LOGOUT","GET_USERS","CLEAR_USERS","GET_CURRENT_USER","findUsers","login","registration","update","getCurrentUser","token","localStorage","user","type","payload","loginAction","formdata","isLogin","dispatch","data","error","Error","updateProfile","formData","clearUsers","logout","clear","getUsers","nickname","users","console","log"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,WAAnC,EAAgDC,gBAAhD,QAAwE,UAAxE;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,YAA3B,EAAyCC,MAAzC,QAAuD,mBAAvD;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,QAAMC,KAAK,GAAGC,YAAY,CAACD,KAA3B;AACA,QAAME,IAAI,GAAGb,UAAU,CAACW,KAAD,CAAvB;AACA,SAAO;AAACG,IAAAA,IAAI,EAAET,gBAAP;AAAyBU,IAAAA,OAAO,EAAEF;AAAlC,GAAP;AACD,CAJM;AAMP,OAAO,MAAMG,WAAW,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB;AAChD,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,IAAI,GAAGF,OAAO,GAChB,MAAMX,KAAK,CAACU,QAAD,CADK,GAEhB,MAAMT,YAAY,CAACS,QAAD,CAFtB;AAGAE,MAAAA,QAAQ,CAAC;AACPL,QAAAA,IAAI,EAAEb,KADC;AACMc,QAAAA,OAAO,EAAEK,IAAI,CAACA,IAAL,CAAUT;AADzB,OAAD,CAAR;AAGAC,MAAAA,YAAY,CAACD,KAAb,GAAqBS,IAAI,CAACA,IAAL,CAAUT,KAA/B;AACD,KARD,CAQE,OAAOU,KAAP,EAAc;AACd,YAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACD;AAEF,GAbD;AAcD,CAfM;AAiBP,OAAO,MAAME,aAAa,GAAGC,QAAQ,IAAI;AACvC,SAAO,MAAML,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,IAAI,GAAG,MAAMX,MAAM,CAACe,QAAD,CAAzB;AACAL,MAAAA,QAAQ,CAAC;AACPL,QAAAA,IAAI,EAAEb,KADC;AACMc,QAAAA,OAAO,EAAEK,IAAI,CAACA,IAAL,CAAUT;AADzB,OAAD,CAAR;AAGAC,MAAAA,YAAY,CAACD,KAAb,GAAqBS,IAAI,CAACA,IAAL,CAAUT,KAA/B;AACAQ,MAAAA,QAAQ,CAACT,cAAc,EAAf,CAAR;AACD,KAPD,CAOE,OAAOW,KAAP,EAAc;AACd,YAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACD;AACF,GAXD;AAYD,CAbM;AAeP,OAAO,MAAMI,UAAU,GAAG,OAAO;AAAEX,EAAAA,IAAI,EAAEV;AAAR,CAAP,CAAnB;AAEP,OAAO,MAAMsB,MAAM,GAAG,MAAM;AAC1Bd,EAAAA,YAAY,CAACe,KAAb;AACA,SAAO;AACLb,IAAAA,IAAI,EAAEZ;AADD,GAAP;AAGD,CALM;AASP,OAAO,MAAM0B,QAAQ,GAAGC,QAAQ,IAAI;AAClC,SAAO,MAAMV,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMW,KAAK,GAAG,MAAMxB,SAAS,CAACuB,QAAD,CAA7B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACV,IAAlB;AACAD,MAAAA,QAAQ,CAAC;AACPL,QAAAA,IAAI,EAAEX,SADC;AACUY,QAAAA,OAAO,EAAEe,KAAK,CAACV;AADzB,OAAD,CAAR;AAGD,KAND,CAME,OAAOC,KAAP,EAAc;AACdU,MAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACD;AACF,GAVD;AAWD,CAZM","sourcesContent":["import jwt_decode from \"jwt-decode\";\r\nimport { LOGIN, LOGOUT, GET_USERS, CLEAR_USERS, GET_CURRENT_USER } from \"../types\"\r\nimport { findUsers, login, registration, update } from '../../api/userApi';\r\n\r\nexport const getCurrentUser = () => {\r\n  const token = localStorage.token\r\n  const user = jwt_decode(token);\r\n  return {type: GET_CURRENT_USER, payload: user}\r\n}\r\n\r\nexport const loginAction = (formdata, isLogin) => {\r\n  return async dispatch => {\r\n    try {\r\n      const data = isLogin\r\n        ? await login(formdata)\r\n        : await registration(formdata)\r\n      dispatch({\r\n        type: LOGIN, payload: data.data.token\r\n      })\r\n      localStorage.token = data.data.token;\r\n    } catch (error) {\r\n      throw new Error(error)\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport const updateProfile = formData => {\r\n  return async dispatch => {\r\n    try {\r\n      const data = await update(formData)\r\n      dispatch({\r\n        type: LOGIN, payload: data.data.token\r\n      })\r\n      localStorage.token = data.data.token;\r\n      dispatch(getCurrentUser())\r\n    } catch (error) {\r\n      throw new Error(error)\r\n    }\r\n  }\r\n}\r\n\r\nexport const clearUsers = () => ({ type: CLEAR_USERS })\r\n\r\nexport const logout = () => {\r\n  localStorage.clear()\r\n  return {\r\n    type: LOGOUT,\r\n  }\r\n}\r\n\r\n\r\n\r\nexport const getUsers = nickname => {\r\n  return async dispatch => {\r\n    try {\r\n      const users = await findUsers(nickname)\r\n      console.log(users.data);\r\n      dispatch({\r\n        type: GET_USERS, payload: users.data\r\n      })\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}