{"ast":null,"code":"var _jsxFileName = \"F:\\\\web\\\\chat\\\\client\\\\src\\\\pages\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport Sidebar from '../components/Sidebar/Sidebar';\nimport Home from '../components/Home/Chat';\nimport { getCurrentUser } from '../store/actions/userAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [isDrawer, setIsDrawer] = useState(false);\n  const [friendConnect, setFriendConnect] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!localStorage.token) {\n      navigate('/login');\n    }\n\n    dispatch(getCurrentUser());\n  }, [navigate, dispatch]);\n\n  const toggleDrawerHandler = () => {\n    setIsDrawer(prev => !prev);\n  };\n\n  const socket = useRef();\n\n  const connection = function () {\n    let room = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    socket.current = new WebSocket('ws://localhost:5000');\n\n    socket.current.onopen = () => {\n      var _currentUser, _currentUser2;\n\n      //setConnected(true)\n      const message = {\n        event: 'connection',\n        username: (_currentUser = currentUser) === null || _currentUser === void 0 ? void 0 : _currentUser.nickname,\n        id: Date.now(),\n        room: `${room}-${(_currentUser2 = currentUser) === null || _currentUser2 === void 0 ? void 0 : _currentUser2.nickname}`\n      };\n      socket.current.send(JSON.stringify(message));\n      console.log('Подключение установлено');\n    };\n\n    socket.current.onmessage = event => {\n      const message = JSON.parse(event.data);\n      setMessages(prev => [message, ...prev]);\n    };\n\n    socket.current.onclose = () => {\n      console.log('Поздключение закрыто');\n    };\n\n    socket.current.onerror = () => {\n      console.log('Ошибка');\n    };\n  };\n\n  const onConnect = nickname => {\n    connection(nickname);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      isDrawer: isDrawer,\n      onConnect: onConnect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Home, {\n      onToggle: toggleDrawerHandler,\n      friendConnect: friendConnect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"Z2P8NkisHL8kvpHf8Nbky3i5VPg=\", false, function () {\n  return [useDispatch, useNavigate];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["F:/web/chat/client/src/pages/Chat.js"],"names":["React","useEffect","useState","useRef","useDispatch","useNavigate","Sidebar","Home","getCurrentUser","Chat","dispatch","isDrawer","setIsDrawer","friendConnect","setFriendConnect","navigate","localStorage","token","toggleDrawerHandler","prev","socket","connection","room","current","WebSocket","onopen","message","event","username","currentUser","nickname","id","Date","now","send","JSON","stringify","console","log","onmessage","parse","data","setMessages","onclose","onerror","onConnect","display"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\r\nimport {useDispatch} from 'react-redux'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport Sidebar from '../components/Sidebar/Sidebar';\r\nimport Home from '../components/Home/Chat'\r\nimport { getCurrentUser } from '../store/actions/userAction';\r\nconst Chat = () => {\r\n  const dispatch = useDispatch()\r\n  const [isDrawer, setIsDrawer] = useState(false)\r\n  const [friendConnect, setFriendConnect] = useState('')\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    if (!localStorage.token) {\r\n      navigate('/login')  \r\n    }\r\n    dispatch(getCurrentUser())\r\n  }, [navigate, dispatch]);\r\n\r\n  const toggleDrawerHandler = () => {\r\n    setIsDrawer(prev => !prev)\r\n  }\r\n\r\n  const socket = useRef()\r\n\r\n  const connection = (room = '') => {\r\n    socket.current = new WebSocket('ws://localhost:5000')\r\n    socket.current.onopen = () => {\r\n      //setConnected(true)\r\n      const message = {\r\n        event: 'connection',\r\n        username: currentUser?.nickname,\r\n        id: Date.now(),\r\n        room: `${room}-${currentUser?.nickname}`\r\n      }\r\n      socket.current.send(JSON.stringify(message))\r\n      console.log('Подключение установлено');\r\n    }\r\n\r\n    socket.current.onmessage = (event) => {\r\n      const message = JSON.parse(event.data)\r\n      setMessages(prev => [message, ...prev])\r\n    }\r\n\r\n    socket.current.onclose = () => {\r\n      console.log('Поздключение закрыто');\r\n    }\r\n\r\n    socket.current.onerror = () => {\r\n      console.log('Ошибка');\r\n    }\r\n  }\r\n\r\n  const onConnect = (nickname) => {\r\n    connection(nickname)\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <div style={{display: 'flex'}}>\r\n      <Sidebar isDrawer={isDrawer} onConnect={onConnect}/>\r\n      <Home onToggle={toggleDrawerHandler} friendConnect={friendConnect} />\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}