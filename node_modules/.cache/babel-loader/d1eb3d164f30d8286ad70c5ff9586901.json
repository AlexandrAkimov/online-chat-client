{"ast":null,"code":"var _jsxFileName = \"F:\\\\web\\\\chat\\\\client\\\\src\\\\pages\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport Sidebar from '../components/Sidebar/Sidebar';\nimport Home from '../components/Home/Chat';\nimport { getCurrentUser } from '../store/actions/userAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  _s();\n\n  const currentUser = useSelector(state => state.user.currentUser);\n  const dispatch = useDispatch();\n  const [isDrawer, setIsDrawer] = useState(false);\n  const [room, setRoom] = useState('');\n  const [friendConnect, setFriendConnect] = useState('');\n  const [messages, setMessages] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!localStorage.token) {\n      navigate('/login');\n    }\n\n    dispatch(getCurrentUser());\n  }, [navigate, dispatch]);\n\n  const toggleDrawerHandler = () => {\n    setIsDrawer(prev => !prev);\n  };\n\n  const socket = useRef();\n\n  const connection = roomNum => {\n    socket.current = new WebSocket('ws://localhost:5000');\n\n    socket.current.onopen = () => {\n      //setConnected(true)\n      const message = {\n        event: 'connection',\n        username: currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname,\n        id: Date.now(),\n        room: roomNum\n      };\n      console.log(message);\n      socket.current.send(JSON.stringify(message));\n      console.log('Подключение установлено');\n    };\n\n    socket.current.onmessage = event => {\n      const message = JSON.parse(event.data);\n      setMessages(prev => [message, ...prev]);\n    };\n\n    socket.current.onclose = () => {\n      console.log('Поздключение закрыто');\n    };\n\n    socket.current.onerror = () => {\n      console.log('Ошибка');\n    };\n  };\n\n  const onConnect = nickname => {\n    setRoom(prev => prev = `${nickname}-${currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname}`);\n    console.log('in onConnect', `${nickname}-${currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname}`);\n    connection(`sdd`);\n  };\n\n  const sendMessage = value => {\n    const message = {\n      event: 'message',\n      username: currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname,\n      id: Date.now(),\n      message: value,\n      room: 'sd'\n    };\n    console.log(message);\n    socket.current.send(JSON.stringify(message));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      isDrawer: isDrawer,\n      onConnect: onConnect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Home, {\n      onToggle: toggleDrawerHandler,\n      messages: messages,\n      sendMessage: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"XLNWbKTpe5XpPvsGOBOA8uL3jG4=\", false, function () {\n  return [useSelector, useDispatch, useNavigate];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["F:/web/chat/client/src/pages/Chat.js"],"names":["React","useEffect","useState","useRef","useDispatch","useSelector","useNavigate","Sidebar","Home","getCurrentUser","Chat","currentUser","state","user","dispatch","isDrawer","setIsDrawer","room","setRoom","friendConnect","setFriendConnect","messages","setMessages","navigate","localStorage","token","toggleDrawerHandler","prev","socket","connection","roomNum","current","WebSocket","onopen","message","event","username","nickname","id","Date","now","console","log","send","JSON","stringify","onmessage","parse","data","onclose","onerror","onConnect","sendMessage","value","display"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport Sidebar from '../components/Sidebar/Sidebar';\r\nimport Home from '../components/Home/Chat'\r\nimport { getCurrentUser } from '../store/actions/userAction';\r\nconst Chat = () => {\r\n  const currentUser = useSelector(state => state.user.currentUser)\r\n  const dispatch = useDispatch()\r\n  const [isDrawer, setIsDrawer] = useState(false)\r\n  const [room, setRoom] = useState('')\r\n  const [friendConnect, setFriendConnect] = useState('')\r\n  const [messages, setMessages] = useState([])\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    if (!localStorage.token) {\r\n      navigate('/login')  \r\n    }\r\n    dispatch(getCurrentUser())\r\n  }, [navigate, dispatch]);\r\n\r\n  const toggleDrawerHandler = () => {\r\n    setIsDrawer(prev => !prev)\r\n  }\r\n\r\n  const socket = useRef()\r\n\r\n  const connection = (roomNum) => {\r\n    socket.current = new WebSocket('ws://localhost:5000')\r\n    socket.current.onopen = () => {\r\n      //setConnected(true)\r\n      const message = {\r\n        event: 'connection',\r\n        username: currentUser?.nickname,\r\n        id: Date.now(),\r\n        room: roomNum\r\n      }\r\n      console.log(message);\r\n      socket.current.send(JSON.stringify(message))\r\n      console.log('Подключение установлено');\r\n    }\r\n\r\n    socket.current.onmessage = (event) => {\r\n      const message = JSON.parse(event.data)\r\n      setMessages(prev => [message, ...prev])\r\n    }\r\n\r\n    socket.current.onclose = () => {\r\n      console.log('Поздключение закрыто');\r\n    }\r\n\r\n    socket.current.onerror = () => {\r\n      console.log('Ошибка');\r\n    }\r\n  }\r\n\r\n  const onConnect = (nickname) => {\r\n    setRoom(prev => prev = `${nickname}-${currentUser?.nickname}`)\r\n    console.log('in onConnect', `${nickname}-${currentUser?.nickname}`);\r\n    connection(`sdd`)\r\n  }\r\n\r\n  const sendMessage = (value) => {\r\n    const message = {\r\n      event: 'message',\r\n      username: currentUser?.nickname,\r\n      id: Date.now(),\r\n      message: value,\r\n      room: 'sd'\r\n    }\r\n    console.log(message);\r\n    socket.current.send(JSON.stringify(message))\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <div style={{display: 'flex'}}>\r\n      <Sidebar isDrawer={isDrawer} onConnect={onConnect}/>\r\n      <Home onToggle={toggleDrawerHandler} messages={messages} sendMessage={sendMessage}/>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}