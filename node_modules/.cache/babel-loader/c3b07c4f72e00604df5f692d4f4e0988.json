{"ast":null,"code":"var _jsxFileName = \"F:\\\\web\\\\chat\\\\client\\\\src\\\\components\\\\Home\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../store/actions/userAction';\nimport './chat.css';\nimport Header from '../Header/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = _ref => {\n  _s();\n\n  let {\n    onToggle\n  } = _ref;\n  const currentUser = useSelector(state => state.user.currentUser);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const logoutHandler = () => {\n    dispatch(logout());\n    navigate('/login');\n  }; //const [connected, setConnected] = useState(false)\n\n\n  const [messages, setMessages] = useState([]);\n  const [value, setValue] = useState('');\n  const [room, setRoom] = useState('');\n  const socket = useRef();\n\n  const connection = () => {\n    socket.current = new WebSocket('ws://localhost:5000');\n    setRoom(``);\n\n    socket.current.onopen = () => {\n      //setConnected(true)\n      const message = {\n        event: 'connection',\n        username: currentUser.nickname,\n        id: Date.now(),\n        room\n      };\n      socket.current.send(JSON.stringify(message));\n      console.log('Подключение установлено');\n    };\n\n    socket.current.onmessage = event => {\n      const message = JSON.parse(event.data);\n      setMessages(prev => [message, ...prev]);\n    };\n\n    socket.current.onclose = () => {\n      console.log('Поздключение закрыто');\n    };\n\n    socket.current.onerror = () => {\n      console.log('Ошибка');\n    };\n  };\n\n  const sendMessage = () => {\n    const message = {\n      event: 'message',\n      username: 'userX',\n      id: Date.now(),\n      message: value,\n      room\n    };\n    socket.current.send(JSON.stringify(message));\n    setValue('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      flexGrow: 1\n    },\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onToggle: onToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: logoutHandler,\n        children: \"\\u0412\\u044B\\u0439\\u0442\\u0438 \\u0438\\u0437 \\u0447\\u0430\\u0442\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connection,\n        children: \"\\u041F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C\\u0441\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: value,\n        onChange: e => setValue(e.target.value),\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), messages.map(mess => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: mess.event === 'connection' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C \", mess.username, \" \\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0438\\u043B\\u0441\\u044F\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [mess.username, \". \", mess.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 19\n        }, this)\n      }, mess.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"4lMsPvTlBLL3SjTAwadSoBeSivk=\", false, function () {\n  return [useSelector, useDispatch, useNavigate];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["F:/web/chat/client/src/components/Home/Chat.js"],"names":["React","useRef","useState","useNavigate","useDispatch","useSelector","logout","Header","Home","onToggle","currentUser","state","user","dispatch","navigate","logoutHandler","messages","setMessages","value","setValue","room","setRoom","socket","connection","current","WebSocket","onopen","message","event","username","nickname","id","Date","now","send","JSON","stringify","console","log","onmessage","parse","data","prev","onclose","onerror","sendMessage","flexGrow","e","target","map","mess"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from 'react';\r\nimport {useNavigate} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { logout } from '../../store/actions/userAction';\r\nimport './chat.css'\r\nimport Header from '../Header/Header';\r\n\r\n\r\nconst Home = ({onToggle}) => {\r\n  const currentUser = useSelector(state => state.user.currentUser)\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate()\r\n  const logoutHandler = () => {\r\n    dispatch(logout())\r\n    navigate('/login')\r\n  }\r\n\r\n  //const [connected, setConnected] = useState(false)\r\n  const [messages, setMessages] = useState([])\r\n  const [value, setValue] = useState('')\r\n  const [room, setRoom] = useState('')\r\n\r\n  const socket = useRef()\r\n\r\n  const connection = () => {\r\n    socket.current = new WebSocket('ws://localhost:5000')\r\n    setRoom(``)\r\n    socket.current.onopen = () => {\r\n      //setConnected(true)\r\n      const message = {\r\n        event: 'connection',\r\n        username: currentUser.nickname,\r\n        id: Date.now(),\r\n        room\r\n      }\r\n      socket.current.send(JSON.stringify(message))\r\n      console.log('Подключение установлено');\r\n    }\r\n\r\n    socket.current.onmessage = (event) => {\r\n      const message = JSON.parse(event.data)\r\n      setMessages(prev => [message, ...prev])\r\n    }\r\n\r\n    socket.current.onclose = () => {\r\n      console.log('Поздключение закрыто');\r\n    }\r\n\r\n    socket.current.onerror = () => {\r\n      console.log('Ошибка');\r\n    }\r\n  }\r\n\r\n  const sendMessage = () => {\r\n    const message = {\r\n      event: 'message',\r\n      username: 'userX',\r\n      id: Date.now(),\r\n      message: value,\r\n      room\r\n    }\r\n\r\n    socket.current.send(JSON.stringify(message))\r\n    setValue('')\r\n  }\r\n  return (\r\n    <div style={{flexGrow: 1}}>\r\n      <Header onToggle={onToggle}/>\r\n      <div className=\"home\">\r\n        <button onClick={logoutHandler}>Выйти из чата</button>\r\n        <button onClick={connection}>Подключиться</button>\r\n        <br/>\r\n        <input type=\"text\" value={value} onChange={e => setValue(e.target.value)} placeholder=\"Введите сообщение\" />\r\n        <button onClick={sendMessage}>Отправить сообщение</button>\r\n        {messages.map(mess => \r\n          <div key={mess.id}>\r\n            {\r\n              mess.event === 'connection'\r\n                ? <div>Пользователь {mess.username} подключился</div>\r\n                : <div>{mess.username}. {mess.message}</div>\r\n            }\r\n          </div>  \r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}