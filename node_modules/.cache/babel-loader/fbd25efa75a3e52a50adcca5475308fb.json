{"ast":null,"code":"var _jsxFileName = \"F:\\\\web\\\\chat\\\\client\\\\src\\\\pages\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport Sidebar from '../components/Sidebar/Sidebar';\nimport Home from '../components/Home/Chat';\nimport { getCurrentUser } from '../store/actions/userAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  _s();\n\n  const currentUser = useSelector(state => state.user.currentUser);\n  const dispatch = useDispatch();\n  const [isDrawer, setIsDrawer] = useState(false);\n  const [room, setRoom] = useState(``);\n  const [messages, setMessages] = useState([]);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const socket = useRef();\n  const publicSocket = useRef();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!localStorage.token) {\n      return navigate('/login');\n    }\n\n    async function publicConnect() {\n      dispatch(getCurrentUser());\n      publicSocket.current = new WebSocket('ws://localhost:5000');\n\n      publicSocket.current.onopen = () => {\n        const message = {\n          event: 'connection',\n          username: currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname,\n          id: Date.now()\n        };\n        console.log(message);\n        publicSocket.current.send(JSON.stringify(message));\n        console.log('Общее подключение установлено');\n      };\n\n      publicSocket.current.onmessage = event => {\n        console.log(event.data);\n      };\n    }\n\n    publicConnect();\n  }, [navigate, dispatch]);\n\n  const toggleDrawerHandler = () => {\n    setIsDrawer(prev => !prev);\n  };\n\n  const connection = roomNum => {\n    socket.current = new WebSocket('ws://localhost:5000');\n\n    socket.current.onopen = () => {\n      //setConnected(true)\n      const message = {\n        event: 'connection',\n        username: currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname,\n        id: Date.now(),\n        room: roomNum\n      };\n      console.log(message);\n      socket.current.send(JSON.stringify(message));\n      console.log(`Подключение ${roomNum} установлено`);\n    };\n\n    socket.current.onmessage = event => {\n      const message = JSON.parse(event.data);\n      setMessages(prev => [message, ...prev]);\n    };\n\n    socket.current.onclose = event => {\n      console.log('Поздключение закрыто');\n    };\n\n    socket.current.onerror = () => {\n      console.log('Ошибка');\n    };\n  };\n\n  const onConnect = nickname => {\n    setRoom(`${nickname}-${currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname}`);\n    connection(`${nickname}-${currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname}`);\n  };\n\n  const sendMessage = value => {\n    const message = {\n      event: 'message',\n      username: currentUser === null || currentUser === void 0 ? void 0 : currentUser.nickname,\n      id: Date.now(),\n      message: value,\n      room\n    };\n    console.log(message);\n    socket.current.send(JSON.stringify(message));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      isDrawer: isDrawer,\n      onConnect: onConnect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Home, {\n      onToggle: toggleDrawerHandler,\n      messages: messages,\n      sendMessage: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"Jj1mt4YydaQqX6SGanvWpW+ZZEU=\", false, function () {\n  return [useSelector, useDispatch, useNavigate];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["F:/web/chat/client/src/pages/Chat.js"],"names":["React","useEffect","useState","useRef","useDispatch","useSelector","useNavigate","Sidebar","Home","getCurrentUser","Chat","currentUser","state","user","dispatch","isDrawer","setIsDrawer","room","setRoom","messages","setMessages","onlineUsers","setOnlineUsers","socket","publicSocket","navigate","localStorage","token","publicConnect","current","WebSocket","onopen","message","event","username","nickname","id","Date","now","console","log","send","JSON","stringify","onmessage","data","toggleDrawerHandler","prev","connection","roomNum","parse","onclose","onerror","onConnect","sendMessage","value","display"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport Sidebar from '../components/Sidebar/Sidebar';\r\nimport Home from '../components/Home/Chat'\r\nimport { getCurrentUser } from '../store/actions/userAction';\r\n\r\nconst Chat = () => {\r\n\r\n  const currentUser = useSelector(state => state.user.currentUser)\r\n  const dispatch = useDispatch()\r\n\r\n  const [isDrawer, setIsDrawer] = useState(false)\r\n  const [room, setRoom] = useState(``)\r\n  const [messages, setMessages] = useState([])\r\n  const [onlineUsers, setOnlineUsers] = useState([])\r\n\r\n  const socket = useRef()\r\n  const publicSocket = useRef()\r\n\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    if (!localStorage.token) {\r\n      return navigate('/login')  \r\n    }\r\n    async function publicConnect() {\r\n      dispatch(getCurrentUser())\r\n      publicSocket.current =  new WebSocket('ws://localhost:5000')\r\n      publicSocket.current.onopen = () => {\r\n        const message = {\r\n          event: 'connection',\r\n          username: currentUser?.nickname,\r\n          id: Date.now(),\r\n        }\r\n        console.log(message);\r\n        publicSocket.current.send(JSON.stringify(message))\r\n        console.log('Общее подключение установлено');\r\n      }\r\n      publicSocket.current.onmessage = (event) => {\r\n        console.log(event.data);\r\n      }\r\n    }\r\n    publicConnect()\r\n  }, [navigate, dispatch]);\r\n\r\n  const toggleDrawerHandler = () => {\r\n    setIsDrawer(prev => !prev)\r\n  }\r\n\r\n  \r\n  \r\n\r\n  const connection = (roomNum) => {\r\n    socket.current = new WebSocket('ws://localhost:5000')\r\n    socket.current.onopen = () => {\r\n      //setConnected(true)\r\n      const message = {\r\n        event: 'connection',\r\n        username: currentUser?.nickname,\r\n        id: Date.now(),\r\n        room: roomNum\r\n      }\r\n      console.log(message);\r\n      socket.current.send(JSON.stringify(message))\r\n      console.log(`Подключение ${roomNum} установлено`);\r\n    }\r\n\r\n    socket.current.onmessage = (event) => {\r\n      const message = JSON.parse(event.data)\r\n      setMessages(prev => [message, ...prev])\r\n    }\r\n\r\n    socket.current.onclose = (event) => {\r\n      console.log('Поздключение закрыто');\r\n    }\r\n\r\n    socket.current.onerror = () => {\r\n      console.log('Ошибка');\r\n    }\r\n  }\r\n\r\n  const onConnect = (nickname) => {\r\n    setRoom(`${nickname}-${currentUser?.nickname}`)\r\n    connection(`${nickname}-${currentUser?.nickname}`)\r\n  }\r\n\r\n  const sendMessage = (value) => {\r\n    const message = {\r\n      event: 'message',\r\n      username: currentUser?.nickname,\r\n      id: Date.now(),\r\n      message: value,\r\n      room\r\n    }\r\n    console.log(message);\r\n    socket.current.send(JSON.stringify(message))\r\n  }\r\n\r\n  return (\r\n    <div style={{display: 'flex'}}>\r\n      <Sidebar isDrawer={isDrawer} onConnect={onConnect}/>\r\n      <Home onToggle={toggleDrawerHandler} messages={messages} sendMessage={sendMessage}/>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}